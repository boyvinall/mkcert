// Code generated by go-bindata.
// sources:
// templates/editorconfig.tpl
// templates/gitignore.tpl
// templates/makefile.tpl
// templates/vscode-settings.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEditorconfigTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\xca\xc2\x40\x0c\x80\xf7\x7b\x8a\xc0\xbf\xfd\x94\x16\xc4\x49\x70\xf3\x0d\x1c\x45\x8e\xda\xcb\xb5\xd1\x6b\x52\x72\x11\xa9\xe2\xbb\xcb\x41\x71\xd0\xc5\x31\xdf\x47\xbe\xe4\x0f\xf6\x88\x30\x98\x4d\x9b\xa6\xc1\x40\x26\xda\x09\x47\xea\x6b\xd1\x1e\xa2\x28\x8c\xa2\x08\xc4\x51\x40\x18\x6c\xa0\x0c\x91\x12\x3a\xa7\x22\x06\x5b\x30\xbd\xa2\x73\x87\xff\xa3\x23\x0e\xc8\xe6\xb3\xcd\x09\x8b\x68\x4f\x6f\x44\xf7\x42\xd6\x0e\x39\x78\x89\x3e\x11\x97\x39\x45\x47\x9c\x51\xcd\x47\xe2\x36\x79\xc6\xdb\x62\x96\xe8\x4e\xba\x0b\x6a\x39\xf7\x55\xcf\x53\xdb\xe1\x47\x7f\x55\xfe\xa8\x1f\xf3\x98\xaa\x73\x16\xae\xc6\xf0\xfc\x71\xef\x15\x00\x00\xff\xff\x36\x99\x9c\xe1\x06\x01\x00\x00")

func templatesEditorconfigTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEditorconfigTpl,
		"templates/editorconfig.tpl",
	)
}

func templatesEditorconfigTpl() (*asset, error) {
	bytes, err := templatesEditorconfigTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/editorconfig.tpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1516356036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignoreTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x5d\xaa\x83\x40\x0c\x46\xdf\xb3\x8a\xc8\x7d\x13\xcc\x5d\x52\xd1\x49\x3a\x0d\xd5\xa4\x8c\x89\xad\xbb\x2f\x38\x7d\xf9\x7e\xe0\x70\x68\x84\x81\xaa\x86\x56\xf3\x26\x7d\xaf\xf3\x32\x15\xa5\x73\x5b\x61\x20\x61\x0d\x6f\xc5\xed\xae\x15\x06\x3a\xf6\xe2\x7c\x71\x3e\x6d\xf3\x53\x00\x0e\x31\xf6\x06\xb7\xde\xd3\x08\xe0\x19\x00\x7f\x28\x1f\x29\x19\xf3\xb2\xca\x8e\xaf\xe6\x9c\x45\x18\xdf\x0f\x31\x3c\x3d\xb1\xa5\xfd\xb3\x2c\x59\x51\x0d\x7f\xd6\xeb\xf7\xa4\x90\x3d\xe0\x1b\x00\x00\xff\xff\xf3\xb5\xe6\x0c\x9e\x00\x00\x00")

func templatesGitignoreTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignoreTpl,
		"templates/gitignore.tpl",
	)
}

func templatesGitignoreTpl() (*asset, error) {
	bytes, err := templatesGitignoreTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gitignore.tpl", size: 158, mode: os.FileMode(420), modTime: time.Unix(1516355716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefileTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x6e\xdb\x3a\x10\x3c\x87\x5f\xb1\x88\xfc\x60\x09\xb0\xa4\xbb\x81\x07\x3c\xe3\x35\x4d\x82\x24\xb5\xd1\xfa\xd2\x53\x41\x8b\x2b\x89\xf1\x8a\x14\xc8\x65\x9c\xc0\xf0\xbf\x17\x94\x9c\xa6\x4d\x51\x20\x71\x75\xa0\x20\xce\x68\x87\x3b\x3b\x52\x92\xbf\xf3\x12\x89\x48\xce\x3c\x72\xe8\x01\xcd\x83\x76\xd6\x74\x68\x38\xee\xbe\xbb\x92\xc0\xc7\xde\x3a\x86\xcb\xe5\x6a\xb1\xbe\x9a\xff\x3b\x49\x1d\x4a\xea\x25\xb7\x30\x49\x7d\x8b\x44\xd0\xef\x54\x56\xee\xf7\xc5\xa5\x5d\x49\x6e\x3f\x23\x1d\x0e\x99\x58\x2f\x57\x7f\x26\x4f\x52\xa5\x1d\x4c\xd2\x5a\x3b\xcf\x3b\xeb\x14\x4c\xd2\xbb\xc5\xcd\xc5\xc7\xeb\xdb\x8b\x6f\xb7\xd7\x5f\xd6\x59\x96\x65\x62\xb5\xf8\xff\x66\x71\x79\x11\xcb\xf8\xb0\xf1\x0c\x93\x74\x3c\x45\x56\x7a\x57\x95\xb3\xd9\x24\x5d\x2f\x57\x59\x26\x4e\x68\x6b\x30\x88\xa5\x51\xd2\x29\x70\x81\xd0\x9f\xe6\x4e\x02\xeb\x16\x61\xe8\x03\x58\xba\x06\x19\x14\xd6\xda\xa0\x02\xed\x81\x5b\x8c\x8f\x32\x10\x83\xae\xc1\xd8\x67\x8e\xf6\x22\x01\xdf\x63\xa5\x6b\x8d\x0a\xac\x19\xa8\x95\xed\x3a\x69\x14\x90\x36\x58\x00\xdc\xc9\x2d\x82\x0f\x0e\x81\x5b\xed\x41\x59\xf4\x66\xca\x22\x01\x8e\x00\x5b\x0b\x64\x4d\x03\x6c\xc1\x05\x33\x03\x6f\x81\x5b\xc9\xd0\xa3\xed\x09\x61\xa7\x89\x22\x00\x9a\x63\x7d\x7c\x40\xf7\x24\x12\xd8\x04\x4d\xaa\x10\xc5\xea\x6a\xf9\xe9\xeb\x1c\x6a\xe9\x59\xc4\x65\x3e\x22\x50\xd9\x07\x74\xb2\xc1\xdc\xb7\x71\xec\xa4\x0d\xe7\x03\x49\x24\xb0\x20\x6f\x8f\xed\x0d\xe7\x3d\xaf\x03\x11\xd4\x92\xcf\x07\x0b\x47\xf9\x78\xcc\x51\x8d\x5b\x6d\x9a\x1f\x4a\x92\x68\x94\x10\x92\xe8\xb5\xda\x51\x27\x10\x09\x91\x6b\x53\x51\x50\x08\x45\x63\xf3\x4e\x6e\xb1\x1c\x96\x8d\x64\x46\xa7\xd1\x17\xdd\x56\xfc\x0a\xfd\x33\x17\x67\x8d\x66\xa8\xc8\x1a\x84\x96\xb9\xf7\xf3\xb2\x6c\x34\xb7\x61\x53\x54\xb6\x2b\x7f\x66\x17\x91\x79\x0c\xe0\x7f\x99\x38\x73\x1d\xe4\xae\x7e\xd9\x29\x23\xe1\xd4\x48\x19\xbb\x8b\xf3\x90\x15\x07\x49\xf4\x74\xec\xd2\x73\xa8\xeb\xa2\x28\xfe\x26\x62\xd3\xa1\xd4\xf4\x25\x40\xb0\x6b\xd1\x21\x3c\xd9\x00\x55\xf0\x6c\x3b\xed\x11\x6a\xeb\xe2\x8e\x83\xde\xd9\x7b\xac\xb8\x10\x09\x5c\x9b\x31\x3f\x5e\x77\x31\x17\xf8\x28\xe3\x7d\x06\x3b\x9c\x12\xc1\x7d\xf0\x0c\xda\x78\x96\xd1\xfb\xe7\x61\x8d\x83\x1a\xd6\xf9\x0b\xba\xdf\xe7\x31\xc6\xc5\x07\x5b\x6d\xd1\x1d\x0e\x27\x9a\xa4\x86\xd7\xc1\x87\x3e\xfe\x59\x4e\x33\xe5\xf7\x90\x8c\x55\xcb\xf8\xd1\xd4\x9a\x50\xbc\x06\xde\x1c\x92\x91\xff\xb6\x98\x44\x47\xd0\xa8\xc3\x41\x7c\x0f\x00\x00\xff\xff\x5b\xfd\x4c\xb8\xa4\x05\x00\x00")

func templatesMakefileTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefileTpl,
		"templates/makefile.tpl",
	)
}

func templatesMakefileTpl() (*asset, error) {
	bytes, err := templatesMakefileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/makefile.tpl", size: 1444, mode: os.FileMode(420), modTime: time.Unix(1516355905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVscodeSettingsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xb1\x0e\x82\x30\x10\x06\xe0\xd9\x3e\xc5\x9f\xc6\x44\x5d\x60\xf7\x05\x5c\x0d\x6f\x70\x29\x07\x57\x41\xae\x69\x4f\x09\x69\xfa\xee\x0e\xae\x5f\x75\x00\xd0\xf7\x30\x89\x05\xb1\x40\x68\x1b\x0f\xc4\x09\xd7\x35\x2e\x8c\x37\xdf\x70\xe8\xe7\x92\x19\x84\x6f\x09\x3a\x32\x26\xda\xb0\x8b\x42\xa8\x80\x30\x6b\x22\x13\x24\xce\x48\x59\x5f\x1c\xcc\x9d\xfc\xac\xdd\xdf\xfd\x1d\xfe\x5c\x77\xcd\x4b\x49\x14\x78\x50\xb5\xd6\xd7\xda\x3d\xf4\x49\x26\x03\xaf\xad\x79\xd7\xdc\x2f\x00\x00\xff\xff\x94\x6a\x60\xbe\x87\x00\x00\x00")

func templatesVscodeSettingsTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVscodeSettingsTpl,
		"templates/vscode-settings.tpl",
	)
}

func templatesVscodeSettingsTpl() (*asset, error) {
	bytes, err := templatesVscodeSettingsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vscode-settings.tpl", size: 135, mode: os.FileMode(420), modTime: time.Unix(1506539637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/editorconfig.tpl": templatesEditorconfigTpl,
	"templates/gitignore.tpl": templatesGitignoreTpl,
	"templates/makefile.tpl": templatesMakefileTpl,
	"templates/vscode-settings.tpl": templatesVscodeSettingsTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"editorconfig.tpl": &bintree{templatesEditorconfigTpl, map[string]*bintree{}},
		"gitignore.tpl": &bintree{templatesGitignoreTpl, map[string]*bintree{}},
		"makefile.tpl": &bintree{templatesMakefileTpl, map[string]*bintree{}},
		"vscode-settings.tpl": &bintree{templatesVscodeSettingsTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

